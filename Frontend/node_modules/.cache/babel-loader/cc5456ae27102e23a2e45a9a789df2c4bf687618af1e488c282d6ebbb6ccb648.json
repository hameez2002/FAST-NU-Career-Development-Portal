{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @param {Date | Number} dateToCompare - the date to compare with\r\n * @param {Array<Date> | Array<number>} datesArray - the array to search\r\n * @returns {Number | undefined} an index of the date closest to the given date or undefined if no valid value is given\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  requiredArgs(2, arguments);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  if (isNaN(Number(dateToCompare))) return NaN;\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray;\n  // `dirtyDatesArray` is undefined or null\n  if (dirtyDatesArray == null) {\n    datesArray = [];\n\n    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray;\n\n    // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = toDate(dirtyDate);\n    if (isNaN(Number(currentDate))) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n    if (result == null || distance < Number(minDistance)) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["toDate","requiredArgs","closestIndexTo","dirtyDateToCompare","dirtyDatesArray","arguments","dateToCompare","isNaN","Number","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","index","currentDate","distance","Math","abs"],"sources":["D:/FYP-1/FAST-NU-Career-Development-Portal/Frontend/node_modules/date-fns/esm/closestIndexTo/index.js"],"sourcesContent":["import toDate from \"../toDate/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @param {Date | Number} dateToCompare - the date to compare with\r\n * @param {Array<Date> | Array<number>} datesArray - the array to search\r\n * @returns {Number | undefined} an index of the date closest to the given date or undefined if no valid value is given\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\nexport default function closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\r\n  requiredArgs(2, arguments);\r\n  var dateToCompare = toDate(dirtyDateToCompare);\r\n  if (isNaN(Number(dateToCompare))) return NaN;\r\n  var timeToCompare = dateToCompare.getTime();\r\n  var datesArray;\r\n  // `dirtyDatesArray` is undefined or null\r\n  if (dirtyDatesArray == null) {\r\n    datesArray = [];\r\n\r\n    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray;\r\n\r\n    // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\r\n  } else {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  }\r\n  var result;\r\n  var minDistance;\r\n  datesArray.forEach(function (dirtyDate, index) {\r\n    var currentDate = toDate(dirtyDate);\r\n    if (isNaN(Number(currentDate))) {\r\n      result = NaN;\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\r\n    if (result == null || distance < Number(minDistance)) {\r\n      result = index;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n  return result;\r\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB;AACvC,OAAOC,YAAY,MAAM,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAcA,CAACC,kBAAkB,EAAEC,eAAe,EAAE;EAC1EH,YAAY,CAAC,CAAC,EAAEI,SAAS,CAAC;EAC1B,IAAIC,aAAa,GAAGN,MAAM,CAACG,kBAAkB,CAAC;EAC9C,IAAII,KAAK,CAACC,MAAM,CAACF,aAAa,CAAC,CAAC,EAAE,OAAOG,GAAG;EAC5C,IAAIC,aAAa,GAAGJ,aAAa,CAACK,OAAO,CAAC,CAAC;EAC3C,IAAIC,UAAU;EACd;EACA,IAAIR,eAAe,IAAI,IAAI,EAAE;IAC3BQ,UAAU,GAAG,EAAE;;IAEf;EACF,CAAC,MAAM,IAAI,OAAOR,eAAe,CAACS,OAAO,KAAK,UAAU,EAAE;IACxDD,UAAU,GAAGR,eAAe;;IAE5B;EACF,CAAC,MAAM;IACLQ,UAAU,GAAGE,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACb,eAAe,CAAC;EAC1D;EACA,IAAIc,MAAM;EACV,IAAIC,WAAW;EACfP,UAAU,CAACC,OAAO,CAAC,UAAUO,SAAS,EAAEC,KAAK,EAAE;IAC7C,IAAIC,WAAW,GAAGtB,MAAM,CAACoB,SAAS,CAAC;IACnC,IAAIb,KAAK,CAACC,MAAM,CAACc,WAAW,CAAC,CAAC,EAAE;MAC9BJ,MAAM,GAAGT,GAAG;MACZU,WAAW,GAAGV,GAAG;MACjB;IACF;IACA,IAAIc,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACf,aAAa,GAAGY,WAAW,CAACX,OAAO,CAAC,CAAC,CAAC;IAC9D,IAAIO,MAAM,IAAI,IAAI,IAAIK,QAAQ,GAAGf,MAAM,CAACW,WAAW,CAAC,EAAE;MACpDD,MAAM,GAAGG,KAAK;MACdF,WAAW,GAAGI,QAAQ;IACxB;EACF,CAAC,CAAC;EACF,OAAOL,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}